/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import kotlin.random.Random

class App {

    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val generatedNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        println("A random $digitsToGuess-digit number has been generated. Start guessing!")

        for (attempt in 1..6) { // Allow up to 6 attempts for simplicity
            println("\nAttempt $attempt of 6. Enter your guess:")
            val userGuess = readLine()?.toIntOrNull()

            if (userGuess == null || userGuess.toString().length != digitsToGuess) {
                println("Invalid input. Please enter a $digitsToGuess-digit number with unique digits.")
                continue
            }

            val compareResult = checkUserInputAgainstGeneratedNumber(userGuess, generatedNumber)
            if (compareResult.m == digitsToGuess) {
                println("Congratulations! You've guessed the number correctly: $generatedNumber")
                return
            } else {
                println("Correct Positions (m): ${compareResult.m}")
                println("Correct Digits Regardless of Position (n): ${compareResult.n}")
            }
        }

        println("Sorry, you've run out of attempts. The correct number was: $generatedNumber")


    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        if (length < 1 || length > 9) {
            throw IllegalArgumentException("Length must be between 1 and 9.")
        }

        val digits = mutableListOf<Int>()
        while (digits.size < length) {
            val randomNumber = Random.nextInt(1, 10)
            if (randomNumber !in digits) {
                digits.add(randomNumber)
            }
        }

        digits.joinToString("").toInt()


    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        if (input.toString().length != generatedNumber.toString().length) {
            throw IllegalArgumentException("The input and the generated number must have the same number of digits.")
        }

        val m = countCorrectPositions(input, generatedNumber)
        val n = countDigitOccurrences(input, generatedNumber)

        CompareResult(n, m)  // return value is a placeholder
    }
}
fun countCorrectPositions(input: Int, generatedNumber: Int): Int {
    val inputString = input.toString()
    val generatedString = generatedNumber.toString()

    if (inputString.length != generatedString.length) {
        throw IllegalArgumentException("Both numbers must have the same number of digits.")
    }

    var correctPositions = 0
    for (i in inputString.indices) {
        if (inputString[i] == generatedString[i]) {
            correctPositions++
        }
    }

    return correctPositions
}

fun countDigitOccurrences(input: Int, generatedNumber: Int): Int {
    val inputString = input.toString()
    val generatedString = generatedNumber.toString()

    val generatedDigits = generatedString.toMutableList()
    var occurrences = 0

    for (charInInput in inputString) {
        if (charInInput in generatedDigits) {
            occurrences++
            generatedDigits.remove(charInInput)
        }
    }

    return occurrences
}

fun main() {
    val app = App()
    val input = 5555
    val generatedNumber = 8567

    println("Input Number: $input")

    println("generated Number: $generatedNumber")

    val cp = countCorrectPositions(input,generatedNumber)

    println("Correct Position: $cp")

    val co = countDigitOccurrences(input,generatedNumber)

    println("Correct Digits Regardless of Position: $co")

    val compareResult = app.checkUserInputAgainstGeneratedNumber(input, generatedNumber)
    println("IN:Correct Positions (m): ${compareResult.m}")
    println("IN:Correct Digits Regardless of Position (n): ${compareResult.n}")

    app.playNumberGame()

}
